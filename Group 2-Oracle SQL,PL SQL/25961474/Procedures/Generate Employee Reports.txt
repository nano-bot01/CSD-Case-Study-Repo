
--Procedure to Generate Employee Reports
CREATE OR REPLACE PROCEDURE Generate_Employee_Report (
    p_employee_id IN Employees.EMPLOYEE_ID%TYPE
) IS
    v_first_name Employees.FIRST_NAME%TYPE;
    v_last_name Employees.LAST_NAME%TYPE;
    v_department_name Departments.NAME%TYPE;
    v_position_title Positions.TITLE%TYPE;
    v_current_salary Employees.SALARY%TYPE;
    CURSOR c_salary_history IS
        SELECT OLD_SALARY, NEW_SALARY, EFFECTIVE_DATE
        FROM Salary_Updates
        WHERE EMPLOYEE_ID = p_employee_id;
BEGIN
    SELECT e.FIRST_NAME, e.LAST_NAME, d.NAME, p.TITLE, e.SALARY
    INTO v_first_name, v_last_name, v_department_name, v_position_title, v_current_salary
    FROM Employees e
    JOIN Departments d ON e.DEPARTMENT_ID = d.DEPARTMENT_ID
    JOIN Positions p ON e.POSITION_ID = p.POSITION_ID
    WHERE e.EMPLOYEE_ID = p_employee_id;

    DBMS_OUTPUT.PUT_LINE('Employee Report for ' || v_first_name || ' ' || v_last_name);
    DBMS_OUTPUT.PUT_LINE('Department: ' || v_department_name);
    DBMS_OUTPUT.PUT_LINE('Position: ' || v_position_title);
    DBMS_OUTPUT.PUT_LINE('Current Salary: ' || v_current_salary);
    DBMS_OUTPUT.PUT_LINE('Salary History:');

    FOR r IN c_salary_history LOOP
        DBMS_OUTPUT.PUT_LINE('Old Salary: ' || r.OLD_SALARY || ', New Salary: ' || r.NEW_SALARY || ', Effective Date: ' || r.EFFECTIVE_DATE);
    END LOOP;
END Generate_Employee_Report;
/

